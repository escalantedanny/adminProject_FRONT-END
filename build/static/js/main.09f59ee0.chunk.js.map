{"version":3,"sources":["context/alertas/alertaContext.js","context/autenticacion/authContext.js","components/auth/Login.js","components/auth/NuevaCuenta.js","context/proyectos/proyectoContext.js","components/proyectos/NuevoProyecto.js","context/tareas/tareaContext.js","components/proyectos/Proyecto.js","components/proyectos/ListadoProyectos.js","components/layouts/Sidebar.js","components/layouts/Barra.js","components/tareas/FormTarea.js","components/tareas/Tarea.js","components/tareas/ListadoTarea.js","components/proyectos/Proyectos.js","context/proyectos/proyectoReducer.js","types/index.js","context/proyectos/proyectoState.js","context/tareas/tareaReducer.js","context/tareas/tareaState.js","context/alertas/alertaReducer.js","context/alertas/alertaState.js","context/autenticacion/authReducer.js","config/axios.js","config/tokenAuth.js","context/autenticacion/authState.js","components/rutas/rutasPrivadas.js","App.js","serviceWorker.js","index.js"],"names":["AlertaContext","createContext","AuthContext","Login","props","alertaContext","useContext","alerta","mostrarAlerta","authContext","mensaje","autenticado","iniciarSession","useEffect","history","push","msg","categoria","useState","email","password","usuario","guardarUsuario","verificar","e","target","name","value","className","onSubmit","preventDefault","trim","length","htmlFor","type","id","placeholder","onChange","to","NuevaCuenta","AlertaConext","registrarUsuario","setTimeout","nombre","confirmar","ProyectoContext","NuevoProyecto","proyectosContext","proyectoContext","formulario","errorformulario","mostrarFormulario","agregarProyecto","mostrarError","proyecto","guardarProyecto","onClick","tareaContext","Proyecto","mostrarProyecto","obtenerTareas","TareaContext","ListadoProyectos","proyectos","obtenerProyectos","TransitionGroup","map","CSSTransition","key","timeout","classNames","Sidebar","Barra","usuarioAutenticado","cerrarSession","cargando","FormTarea","tareasContext","tareaSeleccionada","errorTarea","agregarTarea","validarTarea","actualizarTarea","guardarTarea","tarea","proyectoActual","proyectoId","estado","Tarea","eliminarTarea","cambiarEstadoTarea","guardarTareaActual","cambiarEstado","seleccionarTarea","window","confirm","ListadoTarea","eliminaUnProyecto","tareasProyecto","Proyectos","state","action","payload","filter","ProyectoState","useReducer","proyectoReducer","dispatch","Provider","uuid","v4","children","tareas","TareaState","TareaReducer","AlertaState","alertaReducer","localStorage","setItem","token","removeItem","clienteAxios","axios","create","baseURL","process","REACT_APP_BACKEND_URL","tokenAuth","defaults","headers","common","AuthState","initialState","getItem","AuthReducer","datos","a","post","respuesta","data","response","get","console","log","error","RutaPrivada","Component","component","render","App","exact","path","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.09f59ee0.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst AlertaContext = createContext();\n\nexport default AlertaContext;","import { createContext } from 'react';\n\nconst AuthContext = createContext();\n\nexport default AuthContext;","import React, {useState, useContext, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport AlertaContext from '../../context/alertas/alertaContext';\nimport AuthContext from '../../context/autenticacion/authContext'\n\nconst Login = (props) => {\n\n    //extraer los valores del conext de alerta\n    const alertaContext = useContext(AlertaContext);\n    const { alerta, mostrarAlerta} = alertaContext;\n\n    //extraer los valores del conext de autenticacion\n    const authContext = useContext(AuthContext);\n    const { mensaje, autenticado, iniciarSession } = authContext;\n    \n    // useEffect va a esatr a la escucha de cualqueir cambio en nuestra aplicacion\n    useEffect(() => {\n        if(autenticado)\n            props.history.push('/proyectos');\n        if(mensaje){\n            mostrarAlerta(mensaje.msg , mensaje.categoria);\n            return;\n        }\n    }, [mensaje, autenticado, props.history]);\n\n    const [usuario, guardarUsuario] = useState({\n        email: '',\n        password: ''\n    });\n\n    const { email, password } = usuario;\n\n    const verificar = e => {\n        guardarUsuario({\n            ...usuario,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const validarUsuario = e => {\n        e.preventDefault();\n\n        // validar que no tenga campos vacios\n        if(email.trim() === '' || password.trim() === '' ){\n            mostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\n            return;\n        }\n        if(password.length < 6 ){\n            mostrarAlerta('El password debe tener minimo 6 caracteres', 'alerta-error');\n            return;\n        }\n\n        iniciarSession({email, password});\n    }\n\n        return ( \n            <div className=\"form-usuario\">\n                { alerta ? ( <div className={`alerta ${alerta.categoria}`}> {alerta.msg} </div> )  : null }\n                <div className=\"contenedor-form sombra-dark\">\n                    <h1>Iniciar Sesión</h1>\n\n                    <form onSubmit={validarUsuario} >\n                        <div className=\"campo-form\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                name=\"email\"\n                                value={email}\n                                placeholder=\"Tu Email\"\n                                onChange={verificar}\n                            />\n                        </div>\n                        <div className=\"campo-form\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                name=\"password\"\n                                value={password}\n                                placeholder=\"Tu Password\"\n                                onChange={verificar}\n                            />\n                        </div>\n\n                        <div className=\"campo-form\">\n                            <input \n                                type=\"submit\"\n                                className=\"btn btn-primario btn-block\"\n                                name=\"iniciar\"\n                                id=\"iniciar\"\n                                value=\"Iniciar Sessión\"\n                            />\n                        </div>\n                    </form>\n                    <Link to={'/nueva-cuenta'} className=\"enlace-cuenta\">\n                        Registrarme\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n \nexport default Login;","import React, { useState, useContext, useEffect } from 'react';\nimport {Link} from 'react-router-dom';\nimport AlertaConext from '../../context/alertas/alertaContext';\nimport AuthContext from '../../context/autenticacion/authContext'\n\nconst NuevaCuenta = (props) => {\n\n    //extraer los valores del conext de alerta\n    const alertaContext = useContext(AlertaConext);\n    const { alerta, mostrarAlerta} = alertaContext;\n\n    //extraer los valores del conext de autenticacion\n    const authContext = useContext(AuthContext);\n    const { mensaje, autenticado, registrarUsuario } = authContext;\n\n    // useEffect va a esatr a la escucha de cualqueir cambio en nuestra aplicacion\n    useEffect(() => {\n\n        if(autenticado) {\n            mostrarAlerta('Registrado Correctamente' , 'alerta-ok');\n            setTimeout(() => {\n                props.history.push('/'); \n                //props.history.push('/proyectos'); // indicamos a donde queremos ir despues de autenticar\n            }, 2000);\n        }\n        if(mensaje){\n            mostrarAlerta(mensaje.msg , mensaje.categoria);\n            return;\n        }\n\n\n    }, [mensaje, autenticado, props.history]);\n\n    const [usuario, guardarUsuario] = useState({\n        nombre : '',\n        email: '',\n        password: '',\n        confirmar: ''\n    });\n\n    const { nombre, email, password, confirmar } = usuario;\n\n    const verificar = e => {\n        guardarUsuario({\n            ...usuario,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const validarUsuario = e => {\n        e.preventDefault();\n        \n        // validar que no tenga campos vacios\n        if(nombre.trim() === '' || email.trim() === '' || password.trim() === '' || confirmar.trim() === ''){\n            mostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\n            return;\n        }\n        if(password.length < 6 || confirmar.length < 6){\n            mostrarAlerta('El password debe tener minimo 6 caracteres', 'alerta-error');\n            return;\n        }\n        if(password !== confirmar ){\n            mostrarAlerta('La contraseña y la confirmacion deben ser iguales', 'alerta-error');\n            return;\n        }\n\n        //pasarlo al action\n        registrarUsuario({\n            nombre,\n            email,\n            password \n        });\n\n    }\n\n        return ( \n            <div className=\"form-usuario\">\n            { (alerta)? <div className= {`alerta ${alerta.categoria}`}>{ alerta.msg }</div>: null }\n                <div className=\"contenedor-form sombra-dark\">\n                    <h1>Registro de Usuario</h1>\n\n                    <form onSubmit={validarUsuario} >\n                        <div className=\"campo-form\">\n                            <label htmlFor=\"nombre\">Nombre</label>\n                            <input\n                                type=\"text\"\n                                id=\"nombre\"\n                                name=\"nombre\"\n                                value={nombre}\n                                placeholder=\"Tu Nombre\"\n                                onChange={verificar}\n                            />\n                        </div>                       \n                        <div className=\"campo-form\">\n                            <label htmlFor=\"email\">Email</label>\n                            <input\n                                type=\"email\"\n                                id=\"email\"\n                                name=\"email\"\n                                value={email}\n                                placeholder=\"Tu Email\"\n                                onChange={verificar}\n                            />\n                        </div>\n                        <div className=\"campo-form\">\n                            <label htmlFor=\"password\">Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"password\"\n                                name=\"password\"\n                                value={password}\n                                placeholder=\"Tu Password\"\n                                onChange={verificar}\n                            />\n                        </div>\n                        <div className=\"campo-form\">\n                            <label htmlFor=\"confirmar\">Repetir Password</label>\n                            <input\n                                type=\"password\"\n                                id=\"confirmar\"\n                                name=\"confirmar\"\n                                value={confirmar}\n                                placeholder=\"Repetir Password\"\n                                onChange={verificar}\n                            />\n                        </div>\n\n                        <div className=\"campo-form\">\n                            <input \n                                type=\"submit\"\n                                className=\"btn btn-primario btn-block\"\n                                name=\"iniciar\"\n                                id=\"iniciar\"\n                                value=\"Registrarme\"\n                            />\n                        </div>\n                    </form>\n                    <Link to={'/'} className=\"enlace-cuenta\">\n                        Volver a Iniciar Sessión\n                    </Link>\n                </div>\n            </div>\n        );\n    }\n \nexport default NuevaCuenta;","import { createContext } from 'react';\n\nconst ProyectoContext = createContext();\n\nexport default ProyectoContext;","import React, { Fragment, useState, useContext } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\n\nconst NuevoProyecto = () => {\n\n    //obtener el estate del formulario\n    const proyectosContext = useContext(proyectoContext);\n\n    //importar formulario del context\n    const { formulario, errorformulario, mostrarFormulario, agregarProyecto, mostrarError } = proyectosContext;\n\n    const [proyecto, guardarProyecto] = useState({\n        nombre : ''\n    }); \n\n    //destructuring\n    const { nombre } = proyecto;\n\n    const onChangeProyecto = e => {\n        guardarProyecto({\n            ...proyecto,\n            [e.target.name] : e.target.value\n        });\n    }\n \n    const crearProyecto = () => {\n        mostrarFormulario();\n    }\n\n    // Cuando el usuario envia el proyecto\n    const sendProyecto = e => {\n        e.preventDefault();\n\n        //validar proyecto\n        if(nombre === ''){\n            mostrarError();\n            return;\n        }\n\n        // agregamos el proyecto al listado\n        agregarProyecto(proyecto);\n\n        //reiniciamos el form\n        guardarProyecto({\n            nombre: ''\n        })\n\n    }\n\n    return ( \n        <Fragment>\n            <button \n            value=\"button\"\n            className=\"btn btn-block btn-primario\"\n            onClick={crearProyecto}\n            >Nuevo Proyecto</button>\n\n            {   formulario ? \n                    (\n                        <form className=\"formulario-nuevo-proyecto\" onSubmit={sendProyecto}>\n                            <input type=\"text\" className=\"input-text\" placeholder=\"Nombre del Proyecto\" name=\"nombre\" value={nombre} onChange={onChangeProyecto}/>\n                            <input type=\"submit\" className=\"btn btn-primario btn-block\" value=\"Agregar Proyecto\"/>\n                        </form>\n                    ) : null }\n            { errorformulario \n                ?  (<p className=\"mensaje error\">El Nombre del Proyecto debe ser Obligatorio</p>)\n                : null }\n\n        </Fragment>\n     );\n}\n \nexport default NuevoProyecto;","import { createContext } from 'react';\r\n\r\nconst tareaContext = createContext();\r\n\r\nexport default tareaContext;","import React, {useContext} from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport TareaContext from '../../context/tareas/tareaContext';\n\nconst Proyecto = ({proyecto}) => {\n\n    //obtener el estate del proyecto\n    const proyectosContext = useContext(proyectoContext);\n    const { mostrarProyecto } = proyectosContext;\n\n    //importar formulario del context\n    const tareaContext = useContext(TareaContext);\n    const { obtenerTareas } = tareaContext;\n\n    // funcion para agregar proyecto actual\n    const seleccionarProyecto = id => {\n        mostrarProyecto(id);\n        obtenerTareas(id);\n    }\n\n    return ( \n        <li>\n            <button\n             type=\"button\"\n             className=\"btn btn-blank\"\n             onClick={ () => seleccionarProyecto(proyecto.id)}\n            >{proyecto.nombre}</button>\n        </li>\n     );\n}\n \nexport default Proyecto;","import React, {useContext, useEffect} from 'react';\nimport Proyecto from './Proyecto';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nconst ListadoProyectos = () => {\n\n    //Extraer proyectos de state inicial\n    const proyectosContext = useContext(proyectoContext);\n\n    //importar formulario del context\n    const { proyectos, obtenerProyectos } = proyectosContext;\n    \n    //obtener proyectos cuando carga el componente\n    useEffect(() => {\n        obtenerProyectos();\n        // eslint-disable-next-line\n    }, []);\n\n    // revisar si proyectos tiene contenido\n    if(proyectos.length === 0) return <h2>No Tienes Proyectos</h2>;\n\n    return ( \n        <ul className=\"listado-proyectos\">\n            {\n            <TransitionGroup> \n                {proyectos.map( proyecto => (\n                    <CSSTransition key={proyecto.id} timeout={200} classNames=\"proyecto\">\n                        <Proyecto \n                            \n                            proyecto={proyecto} \n                        />\n                    </CSSTransition>\n                ))}\n            </TransitionGroup> \n            }\n        </ul>\n     );\n}\n \nexport default ListadoProyectos;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport NuevoProyecto from '../proyectos/NuevoProyecto';\nimport ListadoProyectos from '../proyectos/ListadoProyectos';\n\nconst Sidebar = () => {\n    return (\n        <aside>\n            <Link to={'/proyectos'}>\n                <h1>TICKET <span>soft</span></h1>\n            </Link>\n            <div><hr></hr></div>\n            \n            <NuevoProyecto/>\n\n            <div className=\"proyectos\">\n            <Link to={'/proyectos'}>\n                    <h1>Listado de Aplicaciones</h1>\n            </Link>\n                <ListadoProyectos/>\n            </div>\n        </aside>\n    );\n}\nexport default Sidebar;","import React, { useContext, useEffect } from 'react';\nimport AuthContext from '../../context/autenticacion/authContext';\n\nconst Barra = () => {\n\n    //extraer la informacion de autenticacion\n    const authContext = useContext(AuthContext);\n    const { usuario, usuarioAutenticado, cerrarSession, cargando } = authContext;\n\n    useEffect( () => {\n        usuarioAutenticado();\n    }, [])\n\n    const cerrarSesion = () => {\n        cerrarSession();\n    }\n\n    return ( \n        <header className=\"app-header\">\n            { usuario && !cargando ? <p className=\"nombre-usuario\">Hola <span>{usuario.nombre}</span></p> : '' }\n\n            <nav className=\"nav-principal\">\n                <button className=\"btn btn-blank cerrar-sesion\" onClick={cerrarSesion}>\n                    Cerrar Sessión\n                </button>\n            </nav>\n        </header>\n     );\n}\n \nexport default Barra;","import React, { useContext, useState, useEffect } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport TareaContext from '../../context/tareas/tareaContext';\n\n\nconst FormTarea = () => {\n    \n    \n    //obtener si un proyecto esta activo\n    const proyectosContext = useContext(proyectoContext);\n    //importar formulario del context\n    const { proyecto } = proyectosContext;\n\n    //obtenemos context de tareas\n    const tareasContext = useContext(TareaContext);\n    //importar las tareas del formulario\n    const { tareaSeleccionada, errorTarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea } = tareasContext;\n\n    // para cambiar en el tiempo de ejecucion la manipulacion\n    // que detecta si  es una tarea seleccionada\n    useEffect(() => {\n        if(tareaSeleccionada !== null) {\n            guardarTarea(tareaSeleccionada)\n        } else {\n            guardarTarea({\n                nombre : '',\n            });\n        }\n    }, [tareaSeleccionada])\n\n    // agregamos state del formulario\n    const [tarea, guardarTarea] = useState({\n        nombre: ''\n    })\n\n    // extraemos el nombre del proyecto\n    const { nombre } = tarea;\n\n    // si no se a seleccionado ningun proyecto\n    if(!proyecto) return null;\n\n    // aplicacion array Destructuring  para extraer el proyecto actual\n    const [proyectoActual] = proyecto;\n\n    // leer los valores del formulario\n    const handleChange = e => {\n        guardarTarea({\n            ...tarea,\n            [e.target.name]: e.target.value\n        })\n    }\n     \n    const onSubmit = e => {\n       e.preventDefault();\n\n        // validar input del formulario para agregar una tarea\n        if(nombre.trim() === '') {\n            validarTarea();\n            return;\n        }\n\n        // revizamos si existe agregar o editar\n        if(tareaSeleccionada === null) {\n            // agregar nueva tarea al state de tarea\n            tarea.proyectoId = proyectoActual.id;\n            tarea.estado = false;\n            agregarTarea(tarea);\n        } else {\n            actualizarTarea(tarea);\n        }\n\n\n        // obtenemos la tarea y filtrarlas\n        obtenerTareas(proyectoActual.id);\n\n        // reiniciar el form\n        guardarTarea({\n            nombre : '',\n        });\n\n\n    }\n\n    return ( \n        <div className=\"formulario\">\n            <form\n                onSubmit={onSubmit}\n            >\n                <div className=\"contenedor-input\">\n                    <input type=\"text\" className=\"input-text\" placeholder=\"Nombre tarea\" name=\"nombre\" onChange={handleChange} value={nombre} />\n                </div>\n                <div className=\"contenedor-input\">\n                    <input type=\"submit\" className=\"btn btn-primario btn-block\" value={ tareaSeleccionada ? 'Editar Tarea' : 'Guardar Tarea' } />\n                </div>\n            </form>\n            { errorTarea ? <p className=\"mensaje error\">El nombre de la Tarea es Obligatorio</p> :  null }\n        </div>\n     );\n}\n \nexport default FormTarea;","import React, { useContext } from 'react';\nimport TareaContext from '../../context/tareas/tareaContext';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\n\nconst Tarea = ({tarea}) => {\n\n    //obtenemos context de tareas\n    const tareasContext = useContext(TareaContext);\n    //importar las tareas del formulario\n    const { eliminarTarea, obtenerTareas, cambiarEstadoTarea, guardarTareaActual } = tareasContext;\n\n    //obtener si un proyecto esta activo\n    const proyectosContext = useContext(proyectoContext);\n    //importar formulario del context\n    const { proyecto } = proyectosContext;\n\n    // aplicacion array Destructuring  para extraer el proyecto actual\n    const [proyectoActual] = proyecto;\n\n    const deleteTarea = id => {\n        if (window.confirm(`Estas Seguro de eliminar ${tarea.nombre}?`)) {\n            eliminarTarea(id);\n            obtenerTareas(proyectoActual.id);\n        }\n    }\n\n    const cambiarEstado = tarea => {\n        if(tarea.estado){\n            tarea.estado = false;\n        } else {\n            tarea.estado = true;\n        }\n        cambiarEstadoTarea(tarea);\n    }\n\n    const seleccionarTarea = tarea => {\n        guardarTareaActual(tarea);\n    }\n\n    return ( \n        <li className=\"tarea sombra\">\n            <p>{tarea.nombre}</p>\n            <div className=\"estado\">\n                {tarea.estado\n                    ? <button type=\"button\" className=\"completo\" onClick={ () => cambiarEstado(tarea) }>Completo</button>\n                    : <button type=\"button\" className=\"incompleto\" onClick={ () => cambiarEstado(tarea) }>Incompleto</button>\n                }\n            </div>\n            <div className=\"acciones\">\n                <button type=\"button\" className=\"btn btn-primario\" onClick={ () => seleccionarTarea(tarea)}>Editar</button>\n                <button type=\"button\" className=\"btn btn-secundario\" onClick={ () => deleteTarea(tarea.id) } >Eliminar</button>\n            </div>\n        </li>\n     );\n}\n \nexport default Tarea;","import React, { Fragment, useContext} from 'react';\nimport Tarea from './Tarea';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport TareaContext from '../../context/tareas/tareaContext';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nconst ListadoTarea = () => {\n\n    //obtener el estate del proyecto\n    const proyectosContext = useContext(proyectoContext);\n    const { proyecto, eliminaUnProyecto } = proyectosContext;\n\n    //importar formulario del context\n    const tareaContext = useContext(TareaContext);\n    const { tareasProyecto } = tareaContext;\n\n    // si no se a seleccionado ningun proyecto\n    if(!proyecto) return <h2>Selecciona un Proyecto</h2>\n\n    // aplicacion array Destructuring  para extraer el proyecto actual\n    const [proyectoActual] = proyecto;\n\n    // elimina un proyecto\n    const EliminarProyectoSeleccionado = () => {\n\n        if (window.confirm(`Estas Seguro de eliminar ${proyectoActual.nombre}?`)) \n            eliminaUnProyecto(proyectoActual.id); \n\n    }\n    return ( \n        <Fragment>\n            <h2>Proyecto: {proyectoActual.nombre}</h2>\n\n            <ul className=\"listado-tareas\">\n                { tareasProyecto.length === 0\n                    ? (<li className=\"tarea\"><p>No hay tareas Asignadas</p></li>) \n                    : \n                    <TransitionGroup>   \n                        {\n                            tareasProyecto.map(tarea => (\n                                <CSSTransition key={tarea.id} timeout={200} classNames=\"tarea\"><Tarea tarea={tarea} /></CSSTransition>\n                            ))\n                        }\n                    </TransitionGroup> \n                }\n            </ul>\n\n            <button type=\"button\" className=\"btn btn-eliminar\" onClick={EliminarProyectoSeleccionado} >\n                Eliminar Proyecto\n            </button>\n        </Fragment>\n     );\n}\n \nexport default ListadoTarea;","import React, { useContext, useEffect } from 'react';\nimport Sidebar from '../layouts/Sidebar';\nimport Barra from '../layouts/Barra';\nimport FormTarea from '../tareas/FormTarea';\nimport ListadoTarea from '../tareas/ListadoTarea';\nimport AuthContext from '../../context/autenticacion/authContext';\n\nconst Proyectos = () => {\n\n    //extraer la informacion de autenticacion\n    const authContext = useContext(AuthContext);\n    const { usuarioAutenticado } = authContext;\n\n    useEffect( () => {\n        usuarioAutenticado();\n    }, [])\n\n    return ( \n        <div className=\"contenedor-app\">\n            <Sidebar/>\n            <div className=\"seccion-principal\">\n                <Barra/>\n\n                <main>\n\n                    <FormTarea />\n\n                    <div className=\"contenedor-tareas\">\n                        <ListadoTarea />\n                    </div>\n                        \n                </main>\n            </div>\n        </div>\n     );\n}\n \nexport default Proyectos;","import {\n    FORMULARIO_PROYECTO, \n    OBTENER_PROYECTOS, \n    AGREGAR_PROYECTO, \n    VALIDAR_FORMULARIO,\n    PROYECTO_ACTUAL,\n    ELIMINAR_PROYECTO\n} from '../../types';\n\nexport default (state, action) => {\n    \n    switch(action.type) {\n        case FORMULARIO_PROYECTO:\n            return {\n                ...state,\n                formulario: true\n            }\n        case OBTENER_PROYECTOS:\n            return {\n                ...state,\n                proyectos: action.payload // obtenemos el proyecto seleccionado\n            }\n        case AGREGAR_PROYECTO:\n            return {\n                ...state,\n                proyectos: [...state.proyectos, action.payload], // agregamos el proyecto completo al hacer click en el componente\n                formulario: false,\n                errorformulario : false\n            }\n        case VALIDAR_FORMULARIO:\n            return {\n                ...state,\n                errorformulario : true \n            }\n        case PROYECTO_ACTUAL:\n            return {\n                ...state, \n                proyecto: state.proyectos.filter(proyecto => proyecto.id === action.payload) // filtramos por el proyecto seleccionado\n            }\n        case ELIMINAR_PROYECTO:\n            return {\n                ...state, \n                proyectos: state.proyectos.filter(proyecto => proyecto.id !== action.payload), // filtramos por el proyecto seleccionado para eliminarlo  \n                proyecto : null               \n            }\n        default: \n            return state;\n\n    }\n\n}","export const FORMULARIO_PROYECTO = 'FORMULARIO_PROYECTO';\nexport const OBTENER_PROYECTOS = 'OBTENER_PROYECTOS';\nexport const AGREGAR_PROYECTO = 'AGREGAR_PROYECTO';\nexport const VALIDAR_FORMULARIO = 'VALIDAR_FORMULARIO';\nexport const PROYECTO_ACTUAL = 'PROYECTO_ACTUAL';\nexport const ELIMINAR_PROYECTO = 'ELIMINAR_PROYECTO';\n\n\nexport const TAREAS_PROYECTO = 'TAREAS_PROYECTO';\nexport const AGREGAR_TAREA = 'AGREGAR_TAREA';\nexport const VALIDAR_TAREA = 'VALIDAR_TAREA';\nexport const ELIMINAR_TAREA = 'ELIMINAR_TAREA';\nexport const ESTADO_TAREA = 'ESTADO_TAREA';\nexport const TAREA_ACTUAL = 'TAREA_ACTUAL';\nexport const ACTUALIZAR_TAREA = 'ACTUALIZAR_TAREA';\n\nexport const MOSTRAR_ALERTA = 'MOSTRAR_ALERTA';\nexport const OCULTAR_ALERTA = 'OCULTAR_ALERTA';\n\nexport const REGISTRO_EXITOSO = 'REGISTRO_EXITOSO';\nexport const REGISTRO_ERROR = 'REGISTRO_ERROR';\nexport const OBTENER_USUARIO = 'OBTENER_USUARIO';\nexport const LOGIN_EXITOSO = 'LOGIN_EXITOSO';\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const CERRAR_SESSION = 'CERRAR_SESSION';","import React, { useReducer } from 'react';\n\nimport uuid from 'uuid';\n\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer';\nimport {\n            FORMULARIO_PROYECTO, \n            OBTENER_PROYECTOS, \n            AGREGAR_PROYECTO, \n            VALIDAR_FORMULARIO,\n            PROYECTO_ACTUAL,\n            ELIMINAR_PROYECTO \n        } from '../../types';\n\nconst ProyectoState = props => {\n\n    const proyectos = [\n        { id:1, nombre: 'Tienda Virtual' },\n        { id:2, nombre: 'Academia de Desarrollo' },\n        { id:3, nombre: 'Diseño de Sitios Web' },\n        { id:4, nombre: 'Venta de Hosting' },\n        { id:5, nombre: 'Intranet' }\n    ];\n\n    const initialState = {\n        proyectos : [],\n        formulario : false,\n        errorformulario : false,\n        proyecto: null\n    }\n\n    //dispatch para ejecutar las acciones\n    const [state, dispatch] = useReducer(proyectoReducer, initialState)\n\n    //serie de funciones para el CRUD\n    const mostrarFormulario = () => {\n        dispatch({\n            type: FORMULARIO_PROYECTO\n        })\n    }\n\n    //obtener los proyectos  con dispatch\n    const obtenerProyectos = () => {\n        dispatch({\n            type: OBTENER_PROYECTOS,\n            payload: proyectos\n        })\n    }\n\n    // agregamos nuevo proyecto al aside\n    const agregarProyecto = proyecto => {\n        proyecto.id = uuid.v4();\n\n        //insertar proyecto en el state\n        dispatch({\n            type: AGREGAR_PROYECTO,\n            payload: proyecto\n        });\n    }\n\n    //valida el formulario para que sea vacio\n    const mostrarError = () => {\n        dispatch({\n            type: VALIDAR_FORMULARIO\n        })\n    }\n\n    //SELECCIONA EL PROYECTO QUE EL USUARIO LE DIO CLICK\n    const mostrarProyecto = proyectoId => {\n        dispatch({\n            type: PROYECTO_ACTUAL,\n            payload: proyectoId\n        });\n    }\n\n    //ELIMINA EL PROYECTO QUE EL USUARIO LE DIO CLICK\n    const eliminaUnProyecto = proyectoId => {\n        dispatch({\n            type: ELIMINAR_PROYECTO,\n            payload: proyectoId\n        });\n    }\n    return (\n        <proyectoContext.Provider \n            value={{\n                proyectos: state.proyectos,\n                formulario: state.formulario, \n                errorformulario: state.errorformulario,\n                proyecto: state.proyecto,\n                mostrarFormulario,\n                obtenerProyectos,\n                agregarProyecto,\n                mostrarError,\n                mostrarProyecto,\n                eliminaUnProyecto\n            }}\n        >\n            {props.children}\n        </proyectoContext.Provider>\n    );\n}\n\nexport default ProyectoState;","import {\r\n    TAREAS_PROYECTO,\r\n    AGREGAR_TAREA,\r\n    VALIDAR_TAREA,\r\n    ELIMINAR_TAREA,\r\n    ESTADO_TAREA,\r\n    TAREA_ACTUAL,\r\n    ACTUALIZAR_TAREA\r\n} from '../../types';\r\n\r\nexport default (state, action) => {\r\n    \r\n    switch(action.type) {\r\n\r\n        case TAREAS_PROYECTO:\r\n            return {\r\n                ...state,\r\n                tareasProyecto: state.tareas.filter(tarea => tarea.proyectoId === action.payload)\r\n            }\r\n        case AGREGAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareas: [action.payload, ...state.tareas],  \r\n                // traemos las tareas que ya tenemos, mas la nueva con action.payload \r\n                // si queremos cambiar la direccion invertimos los resultados\r\n                errorTarea: false\r\n            }\r\n        case VALIDAR_TAREA:\r\n            return {\r\n                ...state,\r\n                errorTarea: true\r\n            }\r\n        case ELIMINAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareas: state.tareas.filter(tarea => tarea.id !== action.payload)\r\n            }\r\n        case ACTUALIZAR_TAREA:\r\n        case ESTADO_TAREA:\r\n            return {\r\n                ...state,\r\n                tareas: state.tareas.map(tarea => tarea.id === action.payload.id ? action.payload : tarea),\r\n                tareaSeleccionada: null\r\n            }\r\n        case TAREA_ACTUAL:\r\n            return {\r\n                ...state,\r\n                tareaSeleccionada: action.payload\r\n            }\r\n\r\n        default: \r\n            return state;\r\n\r\n    }\r\n\r\n}","import React, { useReducer } from 'react';\r\nimport TareaContext from './tareaContext';\r\nimport TareaReducer from './tareaReducer';\r\nimport uuid from 'uuid';\r\n\r\nimport {\r\n    TAREAS_PROYECTO,\r\n    AGREGAR_TAREA,\r\n    VALIDAR_TAREA,\r\n    ELIMINAR_TAREA,\r\n    ESTADO_TAREA,\r\n    TAREA_ACTUAL,\r\n    ACTUALIZAR_TAREA\r\n} from '../../types';\r\n\r\nconst TareaState = props => {\r\n\r\n    const initialState = {\r\n        tareas : [\r\n            {id: 1, nombre: 'Elegir vender', estado: true, proyectoId: 1},\r\n            {id: 2, nombre: 'Elegir Comprar', estado: false, proyectoId: 2},\r\n            {id: 3, nombre: 'Elegir Arrendar', estado: true, proyectoId: 3},\r\n            {id: 4, nombre: 'Elegir Varios en medulo de trabajador', estado: false, proyectoId: 4},\r\n            {id: 5, nombre: 'Elegir Hosting falso', estado: false, proyectoId: 1},\r\n            {id: 6, nombre: 'Elegir Dominio', estado: false, proyectoId: 2},\r\n            {id: 7, nombre: 'Elegir Maquina Virtual', estado: true, proyectoId: 3},\r\n            {id: 8, nombre: 'Elegir Equipos de primera Necesidad', estado: false, proyectoId: 2},\r\n            {id: 9, nombre: 'Elegir Maquinas de contingencia', estado: true, proyectoId: 3},\r\n            {id: 10, nombre: 'Elegir Productos en venta', estado: false, proyectoId: 4},\r\n            {id: 11, nombre: 'Elegir Asignacion automatica', estado: true, proyectoId: 1},\r\n        ],\r\n        tareasProyecto: null,\r\n        errorTarea: false,\r\n        tareaSeleccionada: null,\r\n    }\r\n\r\n    // crear dispatch y state \r\n    const [state, dispatch] = useReducer(TareaReducer, initialState);\r\n\r\n    // obtener tareas de un prohjecto\r\n    const obtenerTareas = proyectoId => {\r\n        dispatch({\r\n            type: TAREAS_PROYECTO,\r\n            payload: proyectoId\r\n        });\r\n    }\r\n\r\n    // agregamos una tarea al proyecto seleccionado\r\n    const agregarTarea = tarea => {\r\n        tarea.id = uuid.v4();\r\n        dispatch({\r\n            type: AGREGAR_TAREA,\r\n            payload: tarea\r\n        });\r\n    }\r\n\r\n    // valida y muestra un error en caso de que sea necesario\r\n    const validarTarea = () => {\r\n        dispatch({\r\n            type: VALIDAR_TAREA\r\n        });\r\n    }\r\n    \r\n    const eliminarTarea = id => {\r\n        dispatch({\r\n            type: ELIMINAR_TAREA,\r\n            payload: id\r\n        });\r\n    }\r\n\r\n    const cambiarEstadoTarea = tarea => {\r\n        dispatch({\r\n            type: ESTADO_TAREA,\r\n            payload:tarea\r\n        });\r\n    }\r\n\r\n    const guardarTareaActual = tarea => {\r\n        dispatch({\r\n            type: TAREA_ACTUAL,\r\n            payload: tarea\r\n        });\r\n    }\r\n\r\n    const actualizarTarea = tarea => {\r\n        dispatch({\r\n            type: ACTUALIZAR_TAREA,\r\n            payload: tarea\r\n        });\r\n    }\r\n\r\n    return (\r\n        <TareaContext.Provider\r\n            value={{\r\n                tareas: state.tareas,\r\n                tareasProyecto: state.tareasProyecto,\r\n                errorTarea: state.errorTarea,\r\n                tareaSeleccionada: state.tareaSeleccionada,\r\n                obtenerTareas,\r\n                agregarTarea, \r\n                validarTarea,\r\n                eliminarTarea,\r\n                cambiarEstadoTarea,\r\n                guardarTareaActual,\r\n                actualizarTarea\r\n            }}\r\n        >\r\n            {props.children}\r\n        </TareaContext.Provider>\r\n    );\r\n\r\n}\r\n\r\nexport default TareaState;\r\n","import { MOSTRAR_ALERTA, OCULTAR_ALERTA } from '../../types';\n\nexport default (state, action) => {\n    \n    switch(action.type) {\n        case MOSTRAR_ALERTA:\n            return {\n                alerta: action.payload\n            }\n        case OCULTAR_ALERTA:\n            return {\n                alerta: null\n            }\n        default: \n            return state;\n\n    }\n\n}","import React, { useReducer } from 'react';\nimport { MOSTRAR_ALERTA, OCULTAR_ALERTA } from '../../types';\nimport alertaContext from './alertaContext';\nimport alertaReducer from './alertaReducer';\n\nconst AlertaState = props => {\n\n    const initialState = {\n        alerta: null\n    }\n\n    //dispatch para ejecutar las acciones\n    const [state, dispatch] = useReducer(alertaReducer, initialState)\n\n    const mostrarAlerta = (msg, categoria) => {\n        dispatch({\n            type: MOSTRAR_ALERTA,\n            payload: {\n                msg,\n                categoria\n            }\n        });\n\n        setTimeout(() => {\n            dispatch({\n                type: OCULTAR_ALERTA\n            });\n        }, 3000);\n    }\n\n    return (\n        <alertaContext.Provider\n            value={{\n                alerta: state.alerta,\n                mostrarAlerta\n            }}\n        >\n            {props.children}\n        </alertaContext.Provider>\n    );\n}\nexport default AlertaState;","import { \n    REGISTRO_EXITOSO,\n    REGISTRO_ERROR,\n    OBTENER_USUARIO,\n    LOGIN_EXITOSO,\n    LOGIN_ERROR,\n    CERRAR_SESSION\n} from '../../types';\n\nexport default (state, action) => {\n    \n    switch(action.type) {\n        case REGISTRO_EXITOSO:\n        case LOGIN_EXITOSO:    \n            localStorage.setItem('token', action.payload.token)\n            return {\n                ...state,\n                autenticado: true,\n                mensaje: null,\n                cargando: false\n            }\n        case OBTENER_USUARIO: \n            return {\n                ...state,\n                autenticado: true,\n                usuario: action.payload, \n                cargando: false\n            }\n        case CERRAR_SESSION:\n        case LOGIN_ERROR:\n        case REGISTRO_ERROR:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token:null,\n                usuario: null,\n                mensaje: action.payload,\n                autenticado: false,\n                cargando: false\n            }\n            return state;\n\n    }\n\n}","import axios from 'axios';\n\nconst clienteAxios = axios.create({\n    baseURL : process.env.REACT_APP_BACKEND_URL\n});\n\nexport default clienteAxios;","import clienteAxios from './axios';\n\nconst tokenAuth = token => {\n    if(token){\n        clienteAxios.defaults.headers.common['x-auth-token'] = token;\n    }else {\n        delete clienteAxios.defaults.headers.common['x-auth-token'];\n    }\n    \n}\n\nexport default tokenAuth;","import React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport AuthReducer from './authReducer';\n\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/tokenAuth';\nimport { \n    REGISTRO_EXITOSO,\n    REGISTRO_ERROR,\n    OBTENER_USUARIO,\n    LOGIN_EXITOSO,\n    LOGIN_ERROR,\n    CERRAR_SESSION\n} from '../../types';\n\nconst AuthState = props => {\n\n    const initialState = {\n        token: localStorage.getItem('token'),\n        autenticado: null,\n        usuario: null,\n        mensaje:null,\n        cargando: true                                                              \n    }\n\n    const [ state, dispatch ] =  useReducer(AuthReducer, initialState);\n\n    // funciones para la validacion del usuario ingreso a la platagorma\n    const registrarUsuario = async datos => {\n\n        try {\n            const respuesta = await clienteAxios.post('/api/usuarios', datos);\n            dispatch({\n                type: REGISTRO_EXITOSO,\n                payload: respuesta.data\n            });\n\n            //obtenemos usuario\n            usuarioAutenticado();\n        } catch (error) {\n\n            const alerta = {\n                msg : error.response.data.msg,\n                categoria: 'alerta-error',\n            }\n            dispatch({\n                type: REGISTRO_ERROR,\n                payload: alerta\n            })\n        }\n    }\n\n    //retorna el usuario autenticado\n    const usuarioAutenticado = async () => {\n        const token = localStorage.getItem('token');\n        if(token){\n            // funcion para agregar token, por header\n            tokenAuth(token);\n        }\n        \n        try {\n            const respuesta = await clienteAxios.get('/api/auth');\n            console.log(respuesta.data.usuario);\n            \n            dispatch({\n                type: OBTENER_USUARIO,\n                payload: respuesta.data.usuario\n            });\n            \n        } catch (error) {\n            dispatch ({\n                type: LOGIN_ERROR\n            })\n            \n        }\n    }\n\n    // cuando el usuario inicia session\n    const iniciarSession = async datos => {\n        try {\n            console.log(datos);\n            \n            const respuesta = await clienteAxios.post('/api/auth', datos);\n            console.log(respuesta);\n            \n            dispatch({\n                type: LOGIN_EXITOSO,\n                payload: respuesta.data\n            });\n            usuarioAutenticado();\n        } catch (error) {\n\n            const alerta = {\n                msg : error.response.data.msg,\n                categoria: 'alerta-error',\n            }\n            dispatch({\n                type: LOGIN_ERROR,\n                payload: alerta\n            })\n        }\n    }\n\n    // cerrar la session del usuario activo\n    const cerrarSession = () => {\n        try {\n            dispatch({\n                type: CERRAR_SESSION\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    return(\n        <AuthContext.Provider\n        value={{\n            token: state.token,\n            autenticado: state.autenticado,\n            usuario: state.usuario,\n            mensaje: state.mensaje,\n            cargando: state.cargando,\n            registrarUsuario,\n            iniciarSession,\n            usuarioAutenticado,\n            cerrarSession\n        }}\n        >\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\nexport default AuthState;","import React, {useContext, useEffect} from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthContext from '../../context/autenticacion/authContext';\n\nconst RutaPrivada = ({ component: Component, ...props }) => {\n\n    //extraer la informacion de autenticacion\n    const authContext = useContext(AuthContext);\n    const { autenticado, usuarioAutenticado, cargando } = authContext;\n\n    useEffect(() => {\n        usuarioAutenticado();\n    }, [])\n\n    return ( \n        <Route { ...props} render={ props => !autenticado && !cargando ? (\n            <Redirect to=\"/\" />\n        ) : (\n            <Component {...props} />\n        ) }>\n\n        </Route>\n     );\n}\n \nexport default RutaPrivada;\n","import React from 'react';\n//elementos necesarios para habilitar router en nuestro proyecto\n//BrowserRouter as Router, Switch, Route\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Login from './components/auth/Login';\nimport NuevaCuenta from './components/auth/NuevaCuenta';\nimport Proyectos from './components/proyectos/Proyectos';\n\nimport ProyectoState from './context/proyectos/proyectoState';\nimport TareaState from './context/tareas/tareaState';\nimport AlertaState from './context/alertas/alertaState';\nimport AuthState from './context/autenticacion/authState';\n\nimport tokenAuth from './config/tokenAuth';\nimport RutaPrivada from './components/rutas/rutasPrivadas';\n\nconst token = localStorage.getItem('token');\nif(token){\n  tokenAuth(token);\n}\n\n\nfunction App() {\n\n  console.log(process.env.REACT_APP_BACKEND_URL);\n  \n  return (\n      <ProyectoState>\n        <AlertaState>\n          <TareaState>\n            <AuthState>\n              <Router>\n                  <Switch>\n                    <Route exact path=\"/\" component={Login} />\n                    <Route exact path=\"/nueva-cuenta\" component={NuevaCuenta} />\n                    <RutaPrivada exact path=\"/proyectos\" component={Proyectos} />\n                  </Switch>\n                </Router>\n            </AuthState>\n          </TareaState>\n        </AlertaState>\n      </ProyectoState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}